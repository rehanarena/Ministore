getUserOrder: async (req, res) => {
    const locals = {
      title: "ministore - Orders",
    };
  
    try {
      const orderDetails = await Order.findOne({ _id: req.params.id }).populate(
        "items.product_id"
      );
      console.log(orderDetails.items);
      if (!orderDetails) {
        throw new Error("Order not found");
      }
   // Loop through the array and format the dates
   for (const order of orderDetails) {
    switch (order.items.status) {
      case "Confirmed":
        order.items.track = 15;
        order.items.ordered = true;
        order.items.delivered = false;
        order.items.cancelled = false;
        order.items.shipped = false;
        order.items.outdelivery = false;
        order.items.return = false;
        order.items.inReturn = false;
        order.items.needHelp = true;
        break;
      case "Shipped":
        order.items.track = 38;
        order.items.ordered = true;
        order.items.delivered = false;
        order.items.cancelled = false;
        order.items.shipped = true;
        order.items.outdelivery = false;
        order.items.return = false;
        order.items.inReturn = false;
        order.items.needHelp = true;
        break;
      case "Out for Delivery":
        order.items.track = 65;
        order.items.ordered = true;
        order.items.delivered = false;
        order.items.cancelled = false;
        order.items.shipped = true;
        order.items.outdelivery = true;
        order.items.return = false;
        order.items.inReturn = false;
        order.items.needHelp = true;
        break;
      case "Delivered":
        order.items.track = 100;
        order.items.ordered = false;
        order.items.cancelled = false;
        order.items.shipped = true;
        order.items.delivered = true;
        order.items.outdelivery = true;
        order.items.return = true;
        order.items.inReturn = false;
        order.items.needHelp = false;
        break;
      case "Cancelled":
        order.items.track = 0;
        order.items.ordered = false;
        order.items.cancelled = true;
        order.items.delivered = false;
        order.items.shipped = false;
        order.items.outdelivery = false;
        order.items.return = false;
        order.items.inReturn = false;
        order.items.needHelp = true;
        break;
      case "In-Return":
        order.items.track = 0;
        order.items.ordered = false;
        order.items.cancelled = true;
        order.items.delivered = false;
        order.items.shipped = false;
        order.items.outdelivery = false;
        order.items.return = false;
        order.items.inReturn = false;
        order.items.needHelp = true;
        break;
      case "Returned":
        order.items.track = 0;
        order.items.ordered = false;
        order.items.cancelled = true;
        order.items.delivered = false;
        order.items.shipped = false;
        order.items.outdelivery = false;
        order.items.return = false;
        order.items.inReturn = false;
        order.items.needHelp = true;
        break;
      default:
        order.items.track = 0;
        order.items.pending = true;
        order.items.inReturn = false;
    }
  }
  const isInReturn = await Return.findOne({ order_id: order_id });
  console.log(isInReturn);
  if (isInReturn) {
    for (const order of orderDetails) {
      const orderProductId = (await order.items.product_id).toString();
      const orderItemId = (await order.items.orderID).toString();
      const returnProductId = isInReturn.product_id.toString();
      const returnItemId = isInReturn.item_id.toString();

      if (
        orderProductId === returnProductId &&
        orderItemId === returnItemId
      ) {
        order.items.inReturn = false;
        order.items.return = false;
        order.items.needHelp = false;
        // order.items.status = 'Return Requested';
        order.items.track = 10;
      }

      if (
        orderProductId === returnProductId &&
        orderItemId === returnItemId &&
        isInReturn.status === "approved"
      ) {
        order.items.inReturn = true;
        order.items.return = false;
        order.items.needHelp = false;
        // order.items.status = isInReturn.status;
        order.items.track = 60;
      }

      if (
        orderProductId === returnProductId &&
        orderItemId === returnItemId &&
        item.items.status === "Returned"
      ) {
        item.items.track = 100;
        item.items.inReturn = true;
        item.items.return = false;
        item.items.needHelp = false;
        item.items.status = "Returned";
      }
    }
  }
      // Calculate total price
      let totalPrice = 0;
      orderDetails.items.forEach(item => {
        totalPrice += item.price * item.quantity;
      });
  
      res.render("user/order", {
        locals,
        orderDetails,
        orderDetail: orderDetails,
        orderProducts: orderDetails.items,
        address: orderDetails.address,
        itemTotal: totalPrice, 
      });
    } catch (error) {
      console.error("Error fetching order:", error);
      // Handle the error appropriately, for example:
      res.status(404).send("Order not found");
    }
  },
  













  <!-- Hero Section-->
<section class="hero">
    <div class="container">
      <div class="row">
        <%- include('../partials/user/sidebar.ejs') %>
          <div class="col-lg-8">
            <div class="d-flex flex-column">
              <% orderProducts.forEach(item=> { %>
                <div class="card mb-3" style="max-width: 540px;">
                  <div class="row g-0">
                    <div class="col-md-4">
                      <img src="/uploads/cropped/<%- item.product_id.images.image1 %>"
                        class="img-fluid img-thumbnail rounded-start" alt="Product Image">
                    </div>
                    <div class="col-md-8">
                      <div class="card-body">
                        <h5 class="card-title"><%- item.product_id.product_name %></h5>
                        <p class="card-text"><span class="fw-bold">Price: <span class="text-muted"><%- item.price
                                %></span></span></p>
                        <p class="card-text"><span class="fw-bold">Quantity: <span class="text-muted"><%- item.quantity
                                %></span></span></p>
                        <p class="card-text">
                          <span class="fw-bold">Item Total: <span class="text-muted">
                              <%= itemTotal %>
                            </span></span>
                        </p>
  
                        <p class="card-text"><small class="text-body-secondary">Last updated <%-
                              orderDetails.updatedAt.toDateString() %></small></p>
                        <p class="card-text"><small class="text-body-secondary fs-2"><span class="badge bg-success"><%-
                                item.status %></span></small></p>
                      </div>
                      <!-- <div class="d-grid gap-2 flex-row mx-auto"> -->
                        <div class="card-body px-3 m-2 border">
                          <div class="row justify-content-center gap-3 mx-2">
                            <% if (item.ititemed) { %>
                            <button onclick="cancelOrder('<%- orderDetails[0]._id %>','<%- item.items.product_id %>')" type="button" class="btn btn-danger">Cancel Order</button>
                            <% } %>
                            <!-- <button type="button" class="btn col btn-outline-info">Track Order</button> -->
                            <% if (item.items.return) { %>
                            <button type="button" data-order-id="<%- item._id %>"  data-product-id="<%- item .items.product_id %>" data-bs-toggle="modal" data-bs-target="#returnOrderModal" class="btn col btn-outline-warning">Return Order</button>
                            <% } %>
                            <% if (item.items.inReturn) { %>
                            <!-- Return Status -->
                            <input role="button" readonly type="none" class="text-center btn bg-secondary text-warning py-2 px-2" value="Return: <%= item.items.status %>">
                            <% } %>
                            <% if (item.items.delivered) { %>
                            <!-- Return Status -->
                            <button id="invoice" data-order-id="<%- item._id %>" data-item-id="<%- item.items.orderID %>" data-product-id="<%- item.items.product_id._id %>" data-bs-toggle="modal" data-bs-target="#invoiceModal" type="button" class="btn col btn-outline-primary">Download Invoice</button>
                            <% } %>
                            <!-- <button type="button" class="w-100 btn col btn-outline-success"></button> -->
                          </div>
                        </div>
        
                        <% if (item.items.cancelled_on) { %>
                        <div class="card-body p-3 m-3 border">
                          <p class="bg-light text-center fw-bold text-danger">Cancelled on <%= item.items.cancelled_on %></p>
                        </div>
                        <% } %>
                        <% if (item.items.returned_on) { %>
                        <div class="card-body p-3 m-3 border">
                          <p class="bg-light text-center fw-bold text-danger">Returned on <%= item.items.returned_on %></p>
                        </div>
                        <% } %>
        
                        <% if (item.items.pending) { %>
                        <div class="card-body p-3 m-3 border">
                          <p class="bg-light text-center fw-bold text-danger">Payment Failed</p>
                        </div>
                        <% } %>
                        <div class="card-body p-3 m-3 border">
                          <div class="d-flex mb-1 justify-content-center">
                            <div>
                              <p class="text-primary-light mt-1 mb-0 small "><%= item.updatedAt.toLocaleString() %></p>
                            </div>
                            <div>
                              <% if (item.items.shipped) { %>
                              <p class="text-info mt-1 mb-0 small ms-xl-5"><%= item.items.shipped_on %></p>
                              <% } %>
                            </div>
                            <div>
                              <% if (item.items.outdelivery) { %>
                              <p class="text-primary mt-1 mb-0 small ms-xl-5"><%= item.items.out_for_delivery %></p>
                              <% } %>
                            </div>
                            <div>
                              <% if (item.items.delivered) { %>
                              <p class="text-success mt-1 mb-0 small ms-xl-5"><%= item.items.delivered_on %></p>
                              <% } %>
                            </div>
                          </div>
                          <% if (item.items.status !== 'Returned' && item.items.status !== 'In-Return' && item.items.status !== 'Cancelled' && item.items.status !== 'Return Requested') { %>
                            <div class="progress" role="progressbar" aria-label="Success example" aria-valuenow="25" aria-valuemin="0" aria-valuemax="100">
                              <div class="progress-bar bg-success " style="width: <%- item.items.track %>%"></div>
                            </div>
                            <div class="d-flex justify-content-around mb-1">
                              <p class="text-muted fw-bold mt-1 mb-0 small ms-xl-5">Ordered</p>
                              <p class="text-muted fw-bold mt-1 mb-0 small ms-xl-5">Shipped</p>
                              <p class="text-muted fw-bold mt-1 mb-0 small ms-xl-5">Out for delivery</p>
                              <p class="text-muted fw-bold mt-1 mb-0 small ms-xl-5">Delivered</p>
                            </div>
                            <% } %>
                            <% if (['Returned', 'In-Return', 'Return Requested'].includes(item.items.status)) { %>
                              <div class="progress" role="progressbar" aria-label="Success example" aria-valuenow="<%= item.items.track %>" aria-valuemin="0" aria-valuemax="100">
                                <div class="progress-bar badge-warning " style="width: <%- item.items.track %>%;"></div>
                              </div>
                              <div class="d-flex justify-content-between mb-1">
                                <p class="text-muted fw-bold mt-1 mb-0 small ms-xl-5">Return Requested</p>
                                <p class="text-muted fw-bold mt-1 mb-0 small ms-xl-5">In Return</p>
                                <p class="text-muted fw-bold mt-1 mb-0 small ms-xl-5">Return</p>
                              </div>
                           
                          <% } %>
                        </div>
        
                      </div>
                      <% }) %>
                    </div>
  
                      </div>
  
                    </div>
                  </div>
              
      </div>
    </div>
  </section>
  
  <script defer>
    const cancelOrder = async (orderId, itemId) => {
      const confirmed = await Swal.fire({
        title: "Are you sure?",
        text: "You want to cancel this item.",
        icon: "warning",
        showCancelButton: true,
        confirmButtonText: "Yes, cancel!",
        cancelButtonText: "No, keep it!",
        reverseButtons: true,
      });
  
      document.addEventListener("DOMContentLoaded", function () {
        // Hide the button by setting its display property to "none"
        document.getElementById("cancelButton_<%= orderDetails._id %>").style.display = "none";
      });
  
      if (confirmed.isConfirmed) {
        try {
          const response = await fetch(`/user/cancel-order/${orderId}/${itemId}`, {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
          });
          console.log(response);
          const data = await response.json(); // Parse the response as JSON
          console.log(data);
          if (response.ok) {
            Swal.fire({
              title: "Success!",
              text: data.message, // Use the message from the backend
              icon: "success",
              timer: 1500,
            }).then(() => {
              location.reload();
            });
          } else {
            Swal.fire({
              title: "Error!",
              text: data.message || "Something went wrong.", // Use the message from the backend if available
              icon: "error",
              timer: 1500,
            });
          }
        } catch (error) {
          console.error(error);
          Swal.fire({
            title: "Error!",
            text: "Something went wrong.",
            icon: "error",
            timer: 1500,
          });
        }
      }
    }
  </script>
  
  
  
  
  <script defer>
    getOrderDetails: async (req, res) => {
      const orderId = req.params.id;
  
      try {
  
        const orderDetails = await item.findById(orderId)
          .populate("items.product_id")
          .populate("customer_id")
          .populate("address");
  
        res.render("admin/orders/viewOrder", {
          layout,
          orderDetails,
  
        });
      } catch (error) {
        console.log(error);
      }
    },
  </script>