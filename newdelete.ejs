<!-- Hero Section-->
<section class="hero">
  <div class="container">
    <div class="row">
      <%- include('../partials/user/sidebar.ejs') %>
        <div class="col-lg-8">
          <div class="d-flex flex-column">
            <% orderProducts.forEach(item=> { %>
              <div class="card mb-3" style="max-width: 540px;">
                <div class="row g-0">
                  <div class="col-md-4">
                    <img src="/uploads/cropped/<%- item.product_id.images.image1 %>"
                      class="img-fluid img-thumbnail rounded-start" alt="Product Image">
                  </div>
                  <div class="col-md-8">
                    <div class="card-body">
                      <h5 class="card-title"><%- item.product_id.product_name %></h5>
                      <p class="card-text"><span class="fw-bold">Price: <span class="text-muted"><%- item.price
                              %></span></span></p>
                      <p class="card-text"><span class="fw-bold">Quantity: <span class="text-muted"><%- item.quantity
                              %></span></span></p>
                      <p class="card-text"><span class="fw-bold">Item Total: <span class="text-muted"><%- item.itemTotal
                              %>
                          </span></span></p>
                      <p class="card-text"><small class="text-body-secondary">Last updated <%-
                            orderDetails.updatedAt.toDateString() %></small></p>
                      <p class="card-text"><small class="text-body-secondary fs-2"><span class="badge bg-success"><%-
                              item.status %></span></small></p>
                    </div>
                    <div class="card-body px-3 m-2 border">
                      <div class="row justify-content-center gap-3 mx-2">
                        <% if (order.items.ordered) { %>
                        <button onclick="cancelOrder('<%- orderDetails[0]._id %>','<%- order.items.product_id %>')" type="button" class="btn btn-danger">Cancel Order</button>
                        <% } %>
                        <!-- <button type="button" class="btn col btn-outline-info">Track Order</button> -->
                        <% if (order.items.return) { %>
                        <button type="button" data-order-id="<%- order._id %>"  data-product-id="<%- order.items.product_id %>" data-bs-toggle="modal" data-bs-target="#returnOrderModal" class="btn col btn-outline-warning">Return Order</button>
                        <% } %>
                        <% if (order.items.inReturn) { %>
                        <!-- Return Status -->
                        <input role="button" readonly type="none" class="text-center btn bg-secondary text-warning py-2 px-2" value="Return: <%= order.items.status %>">
                        <% } %>
                        <% if (order.items.delivered) { %>
                        <!-- Return Status -->
                        <button id="invoice" data-order-id="<%- order._id %>" data-item-id="<%- order.items.orderID %>" data-product-id="<%- order.items.product_id._id %>" data-bs-toggle="modal" data-bs-target="#invoiceModal" type="button" class="btn col btn-outline-primary">Download Invoice</button>
                        <% } %>
                        <!-- <button type="button" class="w-100 btn col btn-outline-success"></button> -->
                      </div>
                    </div>

                  </div>
                </div>
              </div>
              <% }) %>
          </div>
        </div>
    </div>
  </div>
</section>

<script defer>
  const cancelOrder = async (orderId, itemId) => {
    const confirmed = await Swal.fire({
      title: "Are you sure?",
      text: "You want to cancel this order.",
      icon: "warning",
      showCancelButton: true,
      confirmButtonText: "Yes, cancel!",
      cancelButtonText: "No, keep it!",
      reverseButtons: true,
    });

    if (confirmed.isConfirmed) {
      try {
        const response = await fetch(`/user/cancel-order/${orderId}/${itemId}`, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
        });
        console.log(response);
        const data = await response.json(); // Parse the response as JSON
        console.log(data);
        if (response.ok) {
          Swal.fire({
            title: "Success!",
            text: data.message, // Use the message from the backend
            icon: "success",
            timer: 1500,
          }).then(() => {
            location.reload();
          });
        } else {
          Swal.fire({
            title: "Error!",
            text: data.message || "Something went wrong.", // Use the message from the backend if available
            icon: "error",
            timer: 1500,
          });
        }
      } catch (error) {
        console.error(error);
        Swal.fire({
          title: "Error!",
          text: "Something went wrong.",
          icon: "error",
          timer: 1500,
        });
      }
    }
  }
</script>




<script defer>
  getOrderDetails: async (req, res) => {
    const orderId = req.params.id;

    try {

      const orderDetails = await Order.findById(orderId)
        .populate("items.product_id")
        .populate("customer_id")
        .populate("address");

      res.render("admin/orders/viewOrder", {
        layout,
        orderDetails,

      });
    } catch (error) {
      console.log(error);
    }
  },
</script>



















getUserOrder: async (req, res) => {
  const locals = {
    title: "ministore - Orders",
  };

  try {
    const orderDetails = await Order.findOne({ _id: req.params.id }).populate(
      "items.product_id"
    );
    console.log(orderDetails.items);
    if (!orderDetails) {
      throw new Error("Order not found");
    }

    // Calculate total price
    let totalPrice = 0;
    orderDetails.items.forEach((item) => {
      totalPrice += item.price * item.quantity;
    });

    res.render("user/order", {
      locals,
      orderDetails,
      orderDetail: orderDetails,
      totalPrice: totalPrice,
      orderProducts: orderDetails.items,
      address: orderDetails.address,
      itemTotal: totalPrice,
    });
  } catch (error) {
    console.error("Error fetching order:", error);
    // Handle the error appropriately, for example:
    res.status(404).send("Order not found");
  }
},